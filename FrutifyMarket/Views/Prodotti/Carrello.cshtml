@model IEnumerable<FrutifyMarket.Controllers.Prodotti>

@{
    ViewBag.Title = "Carrello";
    decimal Tot = 0;
    decimal SpedizioneCosto = 0;
}

<link href="~/Content/Site.css" rel="stylesheet" />
@*<link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet">*@
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>

@if (TempData["CartRemove"] != null)
{
    <div id="cartemove" class="alert alert-success mb-5" role="alert">
        @TempData["CartRemove"]
    </div>

    <script>
        // Funzione per nascondere il messaggio dopo 2 secondi
        setTimeout(function () {
            var cartemove = document.getElementById("cartemove");
            if (cartemove) {
                cartemove.style.display = "none";
            }
        }, 1000); // 2000 millisecondi = 2 secondi
    </script>

}

@if (TempData["Ordine"] != null)
{
    <div class="alert alert-success mb-5" role="alert">
        @TempData["Ordine"]
    </div>
}

@using (Html.BeginForm("Create", "Ordini", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    if (!Model.Any())
    {
        <div id="emptyCartMessage" class="alert mb-5 shadow" role="alert" style="background-color: cadetblue; color:black;">
            <p>Il tuo carrello è vuoto, mettici qualcosa!</p>
        </div>
    }

    <div class="cardCart mb-5">
        <div class="row">
            <div class="col-md-8 cart">
                <div class="title">
                    <div class="row">
                        <div class="col"><h4><b>Carrello</b></h4></div>
                        <div class="col align-self-center text-right text-muted">
                        </div>
                    </div>
                </div>
                <div class="row border-top border-bottom">
                    @foreach (var item in Model)
                    {
                        Tot += (decimal)((double?)item.Prezzo); // Aggiunge il prezzo di ogni articolo al totale
                        <div class="row main align-items-center">
                            <div class="col-2"><img class="img-fluid" src="@item.Immagine"></div>
                            <div class="col">
                                <div class="row text-muted">@Html.DisplayFor(modelItem => item.Nome)</div>
                                <div class="row me-3">@Html.DisplayFor(modelItem => item.Descrizione)</div>
                            </div>
                            <div class="col mt-4 me-3">
                                <input id="quantita" type="number" max="@item.Quantita_Disp" min="0" value="1" oninput="updateCartItemQuantity(this, @item.Prezzo)" />
                            </div>
                            <div class="col" id="prezzoArticolo">&euro; @item.Prezzo.ToString("0.00").Replace(",", ".")</div>

                            @Html.ActionLink("Rimuovi", "RemoveFromCart", "Prodotti", new { id = item.ID_Prodotto }, new { @class = "btn rounded-pill bin-button" })
                        </div>

                    }

                    <div>
                        <label for="note">Note:</label>
                        <input id="note" type="text" class="form-control" />
                    </div>

                    <div>
                        <label for="indirizzo">Indirizzo:</label>
                        <input id="indirizzo" type="text" class="form-control" />
                    </div>
                    <div>
                        @*<label for="stato">Stato:</label>*@
                        <input id="stato" type="text" value="In Corso" class="form-control" style="visibility:hidden" />
                    </div>
                </div>

                <div class="mt-5 align-content-end"> @Html.ActionLink("Torna al Negozio", "Index", "Prodotti", new { area = "" }, new { @class = "btn BtnCard2" }) </div>
            </div>
            <div class="col-md-4 summary">
                <div><h5><b>Riepilogo</b></h5></div>
                <hr>
                <div class="row">
                    <div class="col">
                        Subtotale
                    </div>
                    <div class="col" id="subtotal" style="margin-left:-10px;">&euro; @Tot</div>
                </div>
                <form>
                    <p>Tipo Spedizione</p>

                    <select id="selectShipping" onchange="updateTotalPrice()">
                        <option> Seleziona Spedizione </option>
                    </select>
                </form>


                <div class="row">
                    <div class="col">Spedizione</div>
                    <div class="col text-right" id="spedizioneCosto"> <span id="spedizioneAmount">0.00</span></div>

                </div>
                <div class="row" style="border-top: 1px solid rgba(0,0,0,.1); padding: 2vh 0;">
                    <div class="col">Prezzo Totale</div>
                    <div class="col text-right" id="prezzoTotale">€ @(Tot + SpedizioneCosto)</div>
                </div>
                <div class="row justify-content-center">
                    <button type="button" class="btnPaga" id="openPaymentModal" data-toggle="modal" data-target="#paymentModal">Paga</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="paymentModal" tabindex="-1" aria-labelledby="paymentModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="paymentModalLabel">Inserisci Metodo di Pagamento</h5>
                </div>
                <div class="modal-body">
                    <form id="paymentForm">
                        <div class="form-group">
                            <label for="cardNumber">Numero Carta di Credito <span class="required">*</span></label>
                            <input type="text" class="form-control" id="cardNumber" name="cardNumber" placeholder="Inserisci il numero della carta" required maxlength="16" pattern="\d{16}">
                            <small class="form-text text-muted">Il numero della carta deve essere composto da 16 cifre.</small>
                        </div>
                        <div class="form-group mt-3">
                            <label for="expirationDate">Data di Scadenza <span class="required">*</span></label>
                            <input type="text" class="form-control" id="expirationDate" name="expirationDate" placeholder="MM/YY" required pattern="(0[1-9]|1[0-2])\/([0-9]{2})">
                            <small class="form-text text-muted">Il formato della data deve essere MM/YY </small>
                        </div>
                        <div class="form-group mt-3">
                            <label for="cvv">CVV <span class="required">*</span></label>
                            <input type="text" class="form-control" id="cvv" name="cvv" placeholder="CVV" required maxlength="3" pattern="\d{3}">
                            <small class="form-text text-muted">Il CVV deve essere composto da 3 cifre.</small>
                        </div>
                        <div class="form-group mt-3">
                            <label for="cardHolderName">Nome del Titolare <span class="required">*</span></label>
                            <input type="text" class="form-control" id="cardHolderName" name="cardHolderName" placeholder="Nome del Titolare" required>
                        </div>
                        <button type="submit" class="btnPaga w-50 mt-3" id="btnOrdina">Ordina</button>
                    </form>
                </div>
            </div>
        </div>
    </div>



}


<script>


    document.addEventListener("DOMContentLoaded", function () {
        // Define shipping options
        var shippingOptions =
            [
                { value: 'Standard', label: 'Spedizione Standard - €7.00' },
                { value: 'Fast', label: 'Spedizione Rapida - €19.00' },
                { value: 'Gratis', label: 'Spedizione Gratuita' }
            ];

        // Get the select element
        var selectShipping = document.getElementById('selectShipping');

        // Populate the dropdown with shipping options
        shippingOptions.forEach(function (option) {
            var optionElement = document.createElement('option');
            optionElement.value = option.value;
            optionElement.textContent = option.label;
            selectShipping.appendChild(optionElement);
        });
    });

    function updateCartItemQuantity(input, itemPrice) {
        var quantity = input.value;
        var totalPrice = (itemPrice * quantity); // Rimuoviamo toFixed(2) qui
        var parentRow = input.parentNode.parentNode;
        var priceColumn = parentRow.querySelector('.col:nth-child(4)');

        priceColumn.textContent = '€' + totalPrice.toFixed(2); // Aggiungiamo toFixed(2) qui

        updateSubtotal();
        updateCartBadge();
        updateTotalPrice();
    }


    // Funzione per aggiornare la quantità dell'articolo nel carrello
    //function updateCartItemQuantity(input, itemPrice) {
    //    var quantity = input.value;
    //    var totalPrice = (itemPrice * quantity).toFixed(2);
    //    var parentRow = input.parentNode.parentNode;
    //    var priceColumn = parentRow.querySelector('.col:nth-child(4)');

    //    priceColumn.textContent = '€' + parseFloat(totalPrice).toFixed(2);


    //    updateSubtotal();
    //    updateCartBadge();
    //    updateTotalPrice();
    //}

    // Funzione per aggiornare il subtotale del carrello
    function updateSubtotal() {
        var subtotal = 0;
        var items = document.querySelectorAll('.main');
        items.forEach(function (item) {
            var priceColumn = item.querySelector('.col:nth-child(4)');
            var price = parseFloat(priceColumn.textContent.replace('€', ''));
            subtotal += price;
        });
        document.getElementById("subtotal").textContent = '€' + subtotal.toFixed(2);
        updateTotalPrice(); // Aggiorniamo il prezzo totale dopo aver aggiornato il subtotal
    }



    // Funzione per aggiornare il prezzo totale del carrello
    function updateTotalPrice() {
        var total = 0;
        var items = document.querySelectorAll('.main');
        items.forEach(function (item) {
            var priceColumn = item.querySelector('.col:nth-child(4)');
            var price = parseFloat(priceColumn.textContent.replace('€', ''));
            total += price;
        });

        var shippingOption = document.getElementById("selectShipping").value; // Otteniamo l'opzione di spedizione selezionata
        var shippingCost = 0; // Inizializziamo il costo di spedizione a 0

        // Calcoliamo il costo di spedizione in base all'opzione selezionata
        switch (shippingOption) {
            case 'Gratis':

                shippingCost = 0.00;
                break;

            case 'Standard':
                shippingCost = 7.00;
                break;

            case 'Fast':
                shippingCost = 19.00;
                break;
        }

        // Aggiorniamo il testo e il valore dell'elemento con id "spedizioneAmount"
        document.getElementById("spedizioneAmount").textContent = '€' + shippingCost.toFixed(2);

        var totalPrice = total + shippingCost; // Calcoliamo il prezzo totale includendo il costo di spedizione
        document.getElementById("prezzoTotale").textContent = '€' + totalPrice.toFixed(2);
    }



    // Funzione per aggiornare il badge del carrello
    function updateCartBadge() {
        var itemCount = $(".main").length; // Ottenere il numero di articoli nel carrello
        document.getElementById("badgeCart").textContent = itemCount;
    }

    $(document).ready(function () {
        /*updateShippingCost($("#selectShipping").val());*/

        // Aggiungi un gestore di eventi al click del pulsante "Paga"
        $("#openPaymentModal").click(function () {
            // Mostra il modale
            $('#paymentModal').modal('show');
        });

        $("#paymentForm").submit(function (e) {
            e.preventDefault();

            // Ottieni il testo dall'elemento #prezzoTotale
            var priceText = $("#prezzoTotale").text();

            // Rimuovi il simbolo dell'euro e eventuali spazi bianchi dal testo e converti in float
            var priceValue = parseFloat(priceText.replace('€', '').trim());

            // Crea un oggetto formData con i dati del form
            var formData = $(this).serialize();

            // Invia il valore di priceValue nella richiesta POST
            $.ajax({
                type: "POST",
                url: "/Ordina/Ordina",
                data: {
                    costotot: priceValue,
                    note: $('#note').val(), // Valore del campo note
                    indirizzo: $('#indirizzo').val(),// Valore del campo indirizzo
                    quantita: $('#quantita').val(),
                    stato: $('#stato').val()

                },
                success: function (response) {

                    window.location.href = "";
                },
                error: function (xhr, status, error) {

                },
                complete: function () {
                    window.location.href = "/Home/Index";
                }
            });

        });
    });

    // Rimuovi la classe modal-backdrop.show quando il modale si è completamente nascosto
    $('#paymentModal').on('hidden.bs.modal', function (e) {
        // Rimuovi la classe modal-backdrop.show
        $('.modal-backdrop').removeClass('show');
    });
</script>